name: CICD pipeline

on:
  push:
    branches:
      - main

env:
  PG_DATABASE: wd-toDo-test
  PG_USER: ${{ secrets.PG_USER }}
  PG_PASSWORD: ${{ secrets.PG_PASSWORD }}

jobs:
  # Run tests
  run-tests:
    runs-on: ubuntu-latest

    #Set up a PostgreSQL service for testing
    services:
      postgres:
        image: postgres:11.7
        env:
          POSTGRES_USER: ${{ secrets.PG_USER }}
          POSTGRES_PASSWORD: ${{ secrets.PG_PASSWORD }}
          POSTGRES_DB: wd-toDo-test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      # Check out repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Install dependencies
      - name: Install dependencies
        run: cd todo-app && npm ci

      # Run unit tests
      - name: Run unit tests
        run: cd todo-app && npm test

      # - name: Run integration tests
      #   run: |
      #     cd todo-app
      #     npm install cypress cypress-json-results
      #     npx cypress run --env STUDENT_SUBMISSION_URL="http://localhost:3000/"

      # Notify on Slack regardless of the outcome
      - name: Slack Notify
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status}}
          steps: ${{toJson(steps)}}
          channel: "#web-development"
        if: always()

      # Notify on Slack for success
      - name: Success Notify
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Commit has been successful✅"}' ${{secrets.SLACK_WEBHOOK_URL}}

      # Notify on Slack for failure
      - name: Failure Notify
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"⚠️Error: The pipeline has failed❗"}' ${{secrets.SLACK_WEBHOOK_URL}}

      # Run the app for further testing or usage
      - name: Run the app
        id: run-app
        run: |
          cd todo-app
          npm install
          npx sequelize-cli db:drop
          npx sequelize-cli db:create
          npx sequelize-cli db:migrate
          PORT=3000 npm start &
          sleep 5

  # push_to_registry:
  #   name: Push Docker image to Docker Hub
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v4
  #       with:
  #         push: true
  #         tags: |
  #           mahendar07/todo:latest

  docker:
    runs-on: ubuntu-latest
    needs: run-tests

    steps:
      - uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build the Docker image
        run: docker build . --file todo-app/Dockerfile --tag ${{ secrets.DOCKERHUB_USERNAME }}/todo

      - name: Docker Push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/todo

  # Deploy to production
  deploy-to-production:
    runs-on: ubuntu-latest
    needs: docker

    steps:
      # Deploy to Production using Render
      - name: Deploy to Production
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.SERVICE_ID}}
          api-key: ${{ secrets.RENDER_API_KEY}}
