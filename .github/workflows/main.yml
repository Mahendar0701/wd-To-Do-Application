name: Auto test L10 solution

on:
  push:
    branches:
      - main

env:
  PG_DATABASE: wd-toDo-test
  PG_USER: postgres
  PG_PASSWORD: ${{ secrets.PG_PASSWORD }}

jobs:
  run-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:11.7
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: mahi123@#
          POSTGRES_DB: wd-toDo-test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: cd todo-app && npm ci

      - name: Run unit tests
        run: cd todo-app && npm test

      - name: Run the app
        id: run-app
        run: |
          cd todo-app
          npm install
          npx sequelize-cli db:drop
          npx sequelize-cli db:create
          npx sequelize-cli db:migrate
          PORT=3000 npm start &
          sleep 5

  deploy-to-render:
    runs-on: ubuntu-latest
    needs: run-tests

    steps:
      # - name: Navigate to the root directory
      #   run: cd todo-app

      - name: Deploy to Render
        run: |
          curl -sSL https://render.com/install.sh --output render-install.sh
          bash render-install.sh
          rm render-install.sh


          # Log in to Render using secrets for Render account credentials
          render login --email ${{ secrets.RENDER_EMAIL }} --password ${{ secrets.RENDER_PASSWORD }}

          # Deploy to Render (replace your-app-name)
          render deploy -- --build-env production --name wd-To-Do-Application

# name: CICD
# on: push
# env:
#   PG_DATABASE: wd-toDo-test
#   PG_USER: postgres
#   PG_PASSWORD: mahi123@#
# jobs:
#   # Label of the container job
#   run-tests:
#     # Containers must run in Linux based operating systems
#     runs-on: ubuntu-latest

#     # Service containers to run with `container-job`
#     services:
#       # Label used to access the service container
#       postgres:
#         # Docker Hub image
#         image: postgres:11.7
#         # Provide the password for postgres
#         env:
#           POSTGRES_USER: postgres
#           POSTGRES_PASSWORD: mahi123@#
#           POSTGRES_DB: wd-toDo-test
#         # Set health checks to wait until postgres has started
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5
#         ports:
#           - 5432:5432

#     steps:
#       # Downloads a copy of the code in your repository before running CI tests
#       - name: Check out repository code
#         uses: actions/checkout@v3

#       # Performs a clean installation of all dependencies in the `package.json` file
#       # For more information, see https://docs.npmjs.com/cli/ci.html
#       - name: Install dependencies
#         run: cd todo-app && npm ci

#       - name: Run unit tests
#         run: cd todo-app && npm test
#       - name: Run the app
#         id: run-app
#         run: |
#           cd todo-app
#           npm install
#           npx sequelize-cli db:drop
#           npx sequelize-cli db:create
#           npx sequelize-cli db:migrate
#           PORT=3000 npm start &
#           sleep 5

#       # - name: Run integration tests
#       #   run: |
#       #     cd todo-app
#       #     npm install cypress cypress-json-results
#       #     npx cypress run --env STUDENT_SUBMISSION_URL="http://localhost:3000/"
